---
- name: install prereq
  ansible.builtin.apt:
    state: present
    name:
      - ca-certificates
      - gpg
      - lsb-release
      - curl
      - apt-transport-https
      - acl
    update_cache: yes

- name: add Docker GPG key
  ansible.builtin.shell:
    cmd: |
      curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
    creates: /usr/share/keyrings/docker-archive-keyring.gpg

- name: copy over containerd modules template
  template:
    src: containerd.conf.j2
    dest: /etc/modules-load.d/containerd.conf

- name: modprobe modules
  block:
    - name: modprobe overlay
      community.general.modprobe:
        name: overlay
        state: present

    - name: modprobe br_netfilter
      community.general.modprobe:
        name: br_netfilter
        state: present

- name: set sysctl
  block:
    - name: set net.ipv4.ip_forward
      ansible.posix.sysctl:
        name: net.ipv4.ip_forward
        value: "1"
        state: present
        reload: yes
        sysctl_set: yes

    - name: set net.bridge.bridge-nf-call-iptables
      ansible.posix.sysctl:
        name: net.bridge.bridge-nf-call-iptables
        value: "1"
        state: present
        reload: yes
        sysctl_set: yes

    - name: set net.bridge.bridge-nf-call-ip6tables
      ansible.posix.sysctl:
        name: net.bridge.bridge-nf-call-iptables
        value: "1"
        state: present
        reload: yes
        sysctl_set: yes

- name: set containerd repo
  ansible.builtin.shell:
    cmd: |
      echo \
      "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian \
      $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
    creates: /etc/apt/sources.list.d/docker.list

- name: install containerd
  ansible.builtin.apt:
    name: containerd
    state: present
    update_cache: yes

- name: configure containerd
  ansible.builtin.shell:
    cmd: |
         sudo mkdir -p /etc/containerd
         sudo containerd config default | sudo tee /etc/containerd/config.toml
         sudo systemctl restart containerd
    creates: /etc/containerd/config.toml

- name: add Kubernetes GPG key
  ansible.builtin.shell:
    cmd: |
      sudo curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg
    creates: /usr/share/keyrings/kubernetes-archive-keyring.gpg

- name: set Kubernetes repo
  ansible.builtin.shell:
    cmd: |
      echo \
      "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ \
      kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list > /dev/null
    creates: /etc/apt/sources.list.d/kubernetes.list

- name: install Kubernetes packages and prereq
  ansible.builtin.apt:
    name:
      - "kubelet={{ version }}"
      - "kubeadm={{ version }}"
      - "kubectl={{ version }}"
    state: present
    update_cache: yes

- name: stop kubernetes packages from updating by a simple apt upgrade
  ansible.builtin.shell:
    cmd: |
      sudo apt-mark hold kubelet kubeadm kubectl

- name: create the kube user account
  user:
    name: kube
    state: present
    createhome: yes
    shell: /bin/bash

- name: allow 'kube' to use sudo without needing a password
  lineinfile:
    dest: /etc/sudoers
    line: 'kube ALL=(ALL) NOPASSWD: ALL'
    validate: 'visudo -cf %s'

- name: set up authorized keys for the kube user
  authorized_key: user=kube key="{{item}}"
  with_file:
    - ~/.ssh/id_rsa.pub

- name: Enable Kubelet
  systemd: name=kubelet enabled=yes

- include_tasks: init.yml
  when: inventory_hostname in groups['k8s_masters'][0]

- include_tasks: masters.yml
  when: inventory_hostname in groups['k8s_masters'][1:]

- include_tasks: workers.yml
  when: inventory_hostname in groups['k8s_workers']



